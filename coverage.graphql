# FHIR GraphQL Schema. Version 3.5.0-14906

type Coverage {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  type: CodeableConcept
  policyHolder: Reference
  subscriber: Reference
  subscriberId: String  _subscriberId: ElementBase
  beneficiary: Reference
  dependent: String  _dependent: ElementBase
  relationship: CodeableConcept
  period: Period
  payor: [Reference]
  class: [CoverageClass]
  order: positiveInt  _order: ElementBase
  network: String  _network: ElementBase
  copay: [CoverageCopay]
  contract: [Reference]
}

type CoverageClass {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding!
  value: String  _value: ElementBase
  name: String  _name: ElementBase
}

type CoverageCopay {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding
  value: Quantity!
}

input Coverage {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  type: CodeableConcept
  policyHolder: Reference
  subscriber: Reference
  subscriberId: String  _subscriberId: ElementBase
  beneficiary: Reference
  dependent: String  _dependent: ElementBase
  relationship: CodeableConcept
  period: Period
  payor: [Reference]
  class: [CoverageClass]
  order: positiveInt  _order: ElementBase
  network: String  _network: ElementBase
  copay: [CoverageCopay]
  contract: [Reference]
}

input CoverageClass {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding!
  value: String  _value: ElementBase
  name: String  _name: ElementBase
}

input CoverageCopay {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding
  value: Quantity!
}

type CoverageReadType {
  Coverage(id : ID!) : Coverage
}

type CoverageListType {
  CoverageList(_filter : String
    beneficiary : [reference]
    dependent : [String]
    identifier : [token]
    patient : [reference]
    payor : [reference]
    policy_holder : [reference]
    status : [token]
    subscriber : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [reference]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : [Coverage]
}

type CoverageConnectionType {
  CoverageConection(_filter : String
    beneficiary : [reference]
    dependent : [String]
    identifier : [token]
    patient : [reference]
    payor : [reference]
    policy_holder : [reference]
    status : [token]
    subscriber : [reference]
    type : [token]
    _text : [String]
    _content : [String]
    _id : [token]
    _lastUpdated : [date]
    _profile : [reference]
    _query : [token]
    _security : [token]
    _source : [uri]
    _tag : [token]
    _sort : String
    _count : Int
    _cursor : String) : CoverageConnection
}

type CoverageConnection {
  count : Int
  offset : Int
  pagesize : Int
  first : ID
  previous : ID
  next : ID
  last : ID
  edges : [CoverageEdge]
}

type CoverageEdge {
  mode : String
  score : Float
  resource : Coverage
}

type CoverageCreateType {
  CoverageCreate(resource : Coverage) : CoverageCreation
}

type CoverageCreation {
  location : String
  resource : Coverage
  information : OperationOutcome
}

type CoverageUpdateType {
  CoverageUpdate(id : IDresource : Coverage) : CoverageUpdate
}

type CoverageUpdate {
  resource : Coverage
  information : OperationOutcome
}

type CoverageDeleteType {
  CoverageDelete(id : ID) : CoverageDelete
}

type CoverageDelete {
  information : OperationOutcome
}

